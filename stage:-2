#tsp using cheapest link algoritum
#include <iostream>
#include <cstdlib>
using namespace std;
#define V 1000
#define vector
#define INT_MAX
int TSP(int graph[][V], int s)
{
   // store minimum weight Hamiltonian Cycle.
   int min_path = INT_MAX
    do {
        int current_pathweight = 0;
        int k = s;
        for (int i = 0; i < vertex.size(); i++) {
            current_pathweight += graph[k][vertex[i]];
            k = vertex[i];
        }
        current_pathweight += graph[k][s];
        min_path = min(min_path, current_pathweight);
         
    } while (next_permutation(vertex.begin(), vertex.end()));
 
    return min_path;
}

void graph(){
int v, e, i, j, a, b, cost;

cout << "Enter number of vertices: ";
cin >>v;

cout << "Enter number of edges: ";
cin >> e;

int matrix[v][v];

for(i=0; i<v; i++){
for(j=0; j<v; j++){
matrix[i][j] = 0;
}
}

cout << "Enter the edges in pairs:- "<< "\n";

for(i=0; i<e; i++){
cin >> a;
cin >> b;
cout << "Enter Cost: ";
cin >> cost;

matrix[a][b] = cost;
}


// For Printing
for(i=0; i<v; i++){
for(j=0; j<v; j++){
cout << matrix[i][j] << " ";
}
cout << endl;
}






int main(){

graph();



return 0;
   
}


}


#include <iostream>
#include <cstdlib>
using namespace std;
#define V 1000
#define vector
#define INT_MAX
int TSP(int graph[][V], int s)
{
   // store minimum weight Hamiltonian Cycle.
   int min_path = INT_MAX
    do {
        int current_pathweight = 0;
        int k = s;
        for (int i = 0; i < vertex.size(); i++) {
            current_pathweight += graph[k][vertex[i]];
            k = vertex[i];
        }
        current_pathweight += graph[k][s];
        min_path = min(min_path, current_pathweight);
         
    } while (next_permutation(vertex.begin(), vertex.end()));
 
    return min_path;
}

void graph(){
int v, e, i, j, a, b, cost;

cout << "Enter number of vertices: ";
cin >>v;

cout << "Enter number of edges: ";
cin >> e;

int matrix[v][v];

for(i=0; i<v; i++){
for(j=0; j<v; j++){
matrix[i][j] = 0;
}
}

cout << "Enter the edges in pairs:- "<< "\n";

for(i=0; i<e; i++){
cin >> a;
cin >> b;
cout << "Enter Cost: ";
cin >> cost;

matrix[a][b] = cost;
}


// For Printing
for(i=0; i<v; i++){
for(j=0; j<v; j++){
cout << matrix[i][j] << " ";
}
cout << endl;
}






int main(){

graph();



return 0;
   
}


}


#include <iostream>
#include <cstdlib>
using namespace std;
#define V 1000
#define vector
#define INT_MAX
int TSP(int graph[][V], int s)
{
   // store minimum weight Hamiltonian Cycle.
   int min_path = INT_MAX
    do {
        int current_pathweight = 0;
        int k = s;
        for (int i = 0; i < vertex.size(); i++) {
            current_pathweight += graph[k][vertex[i]];
            k = vertex[i];
        }
        current_pathweight += graph[k][s];
        min_path = min(min_path, current_pathweight);
         
    } while (next_permutation(vertex.begin(), vertex.end()));
 
    return min_path;
}

void graph(){
int v, e, i, j, a, b, cost;

cout << "Enter number of vertices: ";
cin >>v;

cout << "Enter number of edges: ";
cin >> e;

int matrix[v][v];

for(i=0; i<v; i++){
for(j=0; j<v; j++){
matrix[i][j] = 0;
}
}

cout << "Enter the edges in pairs:- "<< "\n";

for(i=0; i<e; i++){
cin >> a;
cin >> b;
cout << "Enter Cost: ";
cin >> cost;

matrix[a][b] = cost;
}


// For Printing
for(i=0; i<v; i++){
for(j=0; j<v; j++){
cout << matrix[i][j] << " ";
}
cout << endl;
}






int main(){

graph();



return 0;
   
}


}


#include <iostream>
#include <cstdlib>
using namespace std;
#define V 1000
#define vector
#define INT_MAX
int TSP(int graph[][V], int s)
{
   // store minimum weight Hamiltonian Cycle.
   int min_path = INT_MAX
    do {
        int current_pathweight = 0;
        int k = s;
        for (int i = 0; i < vertex.size(); i++) {
            current_pathweight += graph[k][vertex[i]];
            k = vertex[i];
        }
        current_pathweight += graph[k][s];
        min_path = min(min_path, current_pathweight);
         
    } while (next_permutation(vertex.begin(), vertex.end()));
 
    return min_path;
}

void graph(){
int v, e, i, j, a, b, cost;

cout << "Enter number of vertices: ";
cin >>v;

cout << "Enter number of edges: ";
cin >> e;

int matrix[v][v];

for(i=0; i<v; i++){
for(j=0; j<v; j++){
matrix[i][j] = 0;
}
}

cout << "Enter the edges in pairs:- "<< "\n";

for(i=0; i<e; i++){
cin >> a;
cin >> b;
cout << "Enter Cost: ";
cin >> cost;

matrix[a][b] = cost;
}


// For Printing
for(i=0; i<v; i++){
for(j=0; j<v; j++){
cout << matrix[i][j] << " ";
}
cout << endl;
}






int main(){

graph();



return 0;
   
}


}

